#!/usr/bin/python3
import os
import sys
import hashlib
import json
import zipfile
import zipimport
from electrum.ecc import ECPrivkey

# todo: use version number

if len(sys.argv) != 4:
    print(f"usage: {os.path.basename(__file__)} <plugin_directory> <privkey> <download_url>", file=sys.stderr)
    print(f' - plugin_directory: local path of your repo')
    print(f' - privkey: private key you use for signing. 32 bytes hexadecimal')
    print(f' - download_url: URL of a directory where the plugin file will be available')
    print(f'example: {os.path.basename(__file__)} /opt/electrum-plugin-virtualkeyboard/virtualkeyboard/ deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef https://raw.githubusercontent.com/spesmilo/electrum-plugins/master/')
    sys.exit(1)


source_dir = sys.argv[1]  # where the plugin source code is
if source_dir.endswith('/'):
    source_dir = source_dir[:-1]

privkey_hex = sys.argv[2]
ec_privkey = ECPrivkey(bytes.fromhex(privkey_hex))
pubkey = ec_privkey.get_public_key_bytes(compressed=True)

download_repo = sys.argv[3]


plugin_name = os.path.basename(source_dir)
if not plugin_name:
    print('no basename', source_dir)
    exit(1)
dest_dir = os.path.dirname(source_dir)
zip_path = os.path.join(dest_dir, plugin_name + '.zip')


# remove old zipfile
if os.path.exists(zip_path):
    os.unlink(zip_path)
# create zipfile
print('creating', zip_path)
with zipfile.ZipFile(zip_path, 'w') as zip_object:
    for folder_name, sub_folders, file_names in os.walk(source_dir):
        for filename in file_names:
            file_path = os.path.join(folder_name, filename)
            dest_path = os.path.join(plugin_name, os.path.relpath(folder_name, source_dir), os.path.basename(file_path))
            zip_object.write(file_path, dest_path)
            print('added', dest_path)

# read hash
with open(zip_path, 'rb') as f:
    s = f.read()
plugin_hash = bytes(hashlib.sha256(s).digest())

# create metadata
zip_file = zipimport.zipimporter(zip_path)
module = zip_file.load_module(plugin_name)
plugin_metadata = {
    'name': plugin_name,
    'hash': plugin_hash.hex(),
    'pubkey': pubkey.hex(),
    'description': module.description,
    'display_name': module.fullname,
    'available_for': module.available_for,
    'author': module.author,
    'licence': module.licence,
    'version': module.version,
}

if not module.version:
    raise Exception('version not set')

versioned_plugin_name = plugin_name + '-' + module.version + '.zip'
zip_path_with_version = os.path.join(dest_dir, versioned_plugin_name)
plugin_metadata['download_url'] = download_repo + versioned_plugin_name

# rename zip file
os.rename(zip_path, zip_path_with_version)

# sign metadata
metadata_hash = bytes(hashlib.sha256(json.dumps(plugin_metadata, sort_keys=True).encode()).digest())
metadata_sig = ec_privkey.ecdsa_sign(metadata_hash)
ec_privkey.ecdsa_verify(metadata_sig, metadata_hash)
plugin_metadata['signature'] = metadata_sig.hex()

json_path = os.path.join(dest_dir, plugin_name + '.json')
with open(json_path, 'w') as f:
    s = json.dumps(plugin_metadata, indent=4, sort_keys=True)
    f.write(s)

print(f'Created {zip_path_with_version} and {json_path}')
print('Please upload these files on your webserver')
